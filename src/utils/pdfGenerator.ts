import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";


export const generateInvoicePDF = async (
    orders: {
        date: Date;
        mealType: string;
        menus_id: { price: number };
    }[],
    totalPrice: number,
    companyName: string,
): Promise<string> => {
    const doc = new PDFDocument({ margin: 50 });
    const filePath = path.join(__dirname, `invoice-${Date.now()}.pdf`);
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);


    // ===================== LOGO =====================
    // const logoPath = path.join(__dirname, "Business-Food-Service.png");
    // if (fs.existsSync(logoPath)) {
    //     doc.image(logoPath, doc.page.width / 2 - 50, 30, { width: 100 });
    // }
    doc.moveDown(4);

    // ===================== HEADER =====================
    doc.fontSize(16).fillColor("#333").text(`${companyName} - Monthly Invoice`, {
        align: "center",
    });
    doc.moveDown(2);

    // ===================== TABLE =====================
    const tableTop = doc.y;
    const dateX = 50;
    const mealX = 200;
    const priceX = 400;

    // Table headers
    doc.fontSize(12).fillColor("#fff")
        .rect(dateX - 5, tableTop - 5, 500, 20)
        .fill("#007bff")
        .stroke();
    doc.fillColor("#fff").text("Date", dateX, tableTop);
    doc.text("Meal Type", mealX, tableTop);
    doc.text("Price", priceX, tableTop);

    // Table rows with alternating colors
    let i = 0;
    orders.forEach((order) => {
        i++;
        const y = tableTop + i * 25;

        if (i % 2 === 0) {
            doc.rect(45, y - 5, 510, 25).fill("#f2f2f2").stroke();
        }

        const date = new Date(order.date).toLocaleDateString("en-GB", {
            day: "2-digit",
            month: "short",
            year: "2-digit",
        });

        doc.fillColor("#000").text(date, dateX, y);
        doc.text(order.mealType || "Dinner", mealX, y);
        doc.text(`$${order.menus_id?.price || 0}`, priceX, y);
    });

    // ===================== SUMMARY =====================
    const summaryTop = tableTop + (orders.length + 2) * 25;
    doc.moveDown();

    doc.fontSize(14).fillColor("#333").text(`Total Meals: ${orders.length}`, 50, summaryTop);
    doc.fontSize(14).fillColor("#007bff").text(`Total Cost: $${totalPrice}`, 50, summaryTop + 25);

    // ===================== FOOTER =====================
    doc.moveDown(4);
    doc.fontSize(10).fillColor("gray").text("Generated by Business Food Service", {
        align: "center",
    });

    doc.end();

    await new Promise<void>((resolve, reject) => {
        stream.on("finish", () => resolve());
        stream.on("error", (err) => reject(err));
    });

    return filePath;
};
